@model List<WebBanSach.Models.Data.Sach>
@using WebBanSach.Models.Data
@using WebBanSach.Models.Data.ChainOfResponsitory
@using System.Globalization

@{
    ViewBag.Title = "Lọc sách";
    var filter = ViewBag.filterResult as SachFilter;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Lọc sách</h2>
<!-- Form lọc -->
<div class="filter-container" style="background-color: #4a787a; padding: 20px; border-radius: 10px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);">
    @Html.Partial("_FilterPanel", filter ?? new SachFilter())
</div>

<!-- Kết quả lọc -->
@if (Model != null && Model.Any())
{
    <h2>Kết quả lọc</h2>
    <div class="container">
        <!-- Card lớn bao ngoài -->
        <div class="row">
            @foreach (var sach in Model)
            {
                <div class="col-md-6 mb-8">
                    <!-- Card nhỏ bên trong -->
                    <div class="card shadow-sm bg-success" style="border-radius: 15px; overflow: hidden;">
                        <div class="row g-0 align-items-center">
                            <!-- Hình ảnh bìa sách -->
                            <div class="col-md-3">
                                <img src="~/images/@sach.AnhBia" class="img-fluid" alt="@sach.TenSach" style="height: fit-content; width: 100%; object-fit: cover; padding: 10px" />
                            </div>
                            <!-- Thông tin sách -->
                            <div class="col-md-9 m-10">
                                <div class="card-body p-5">
                                    <h5 class="mb-1">@sach.TenSach</h5>
                                    <p class="card-text text-muted small mb-1">Tác giả: @(sach.TacGia?.TenTG ?? "Không rõ tác giả")</p>
                                    <!-- Thể loại -->
                                    <div class="mb-1">
                                        @if (!string.IsNullOrEmpty(sach.TheLoai?.TenLoai))
                                        {
                                            var theLoaiList = sach.TheLoai.TenLoai.Split(',').Select(t => t.Trim()).ToList();
                                            foreach (var theLoai in theLoaiList)
                                            {
                                                <span class="badge bg-light text-dark me-1 small">@theLoai</span>
                                            }
                                        }
                                    </div>
                                    <!-- Giá -->
                                    <p class="card-text small mb-1">@sach.GiaBan.GetValueOrDefault(0).ToString("N0", new CultureInfo("vi-VN")) VND</p>
                                    <!-- Ngày cập nhật -->
                                    <p class="card-text text-muted small mb-0">
                                        Ngày cập nhật: @(sach.NgayCapNhat.HasValue ? sach.NgayCapNhat.Value.ToString("dd/MM/yyyy") : "Chưa cập nhật")
                                    </p>
                                    <!-- Nút Like -->
                                    <button class="btn btn-outline-danger btn-sm rounded-circle position-absolute end-0 top-0 m-2">
                                        <i class="bi bi-heart"></i>
                                    </button>
                                    <a href="@Url.Action("Details", "Book", new { id = sach.MaSach })" class="btn-detail">Xem chi tiết</a>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- Đường phân cách giữa các sách (trừ sách cuối) -->
                    @if (Model.IndexOf(sach) < Model.Count - 1)
                    {
                        <hr class="my-1" style="border-color: rgba(255, 255, 255, 0.3);" />
                    }
                </div>
            }
        </div>
    </div>

    <!-- Bootstrap Icons -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet" />
}
else
{
    <p>Không có sách nào phù hợp với tiêu chí lọc.</p>
}
<!-- JavaScript để loại bỏ các tham số rỗng -->
<script>
    document.getElementById("filter-Form").addEventListener("submit", function (event) {
        event.preventDefault(); // Ngăn form gửi ngay lập tức

        // Lấy tất cả các input trong form
        const form = this;
        const inputs = form.querySelectorAll("input , select");
        const params = new URLSearchParams();
        inputs.forEach(input => {
            console.log(`Input name: ${input.name}, value: ${input.value}, tag: ${input.tagName}, type: ${input.type || 'select'}`);

            // Kiểm tra nếu input có name và giá trị không rỗng
            if (input.name && input.value) {
                // Xử lý radio button: chỉ thêm nếu được chọn
                if (input.type === "radio" && !input.checked) {
                    console.log(`Skipping radio button ${input.name} because it is not checked`);
                    return;
                }

                // Xử lý spinner (select): bỏ qua nếu giá trị là rỗng (tùy chọn mặc định)
                if (input.tagName.toLowerCase() === "select") {
                    if (input.value === "") {
                        console.log(`Skipping select ${input.name} because value is empty`);
                        return;
                    }
                    console.log(`Adding select ${input.name} with value ${input.value}`);
                    params.append(input.name, input.value);
                    return;
                }

                // Xử lý các trường input text, number, date: bỏ qua nếu giá trị rỗng
                if (input.type === "text" || input.type === "number" || input.type === "date") {
                    if (input.value.trim() === "") {
                        console.log(`Skipping input ${input.name} because value is empty`);
                        return;
                    }
                    console.log(`Adding input ${input.name} with value ${input.value}`);
                    params.append(input.name, input.value);
                    return;
                }

                // Thêm các tham số khác
                console.log(`Adding ${input.name} with value ${input.value}`);
                params.append(input.name, input.value);
            } else {
                console.log(`Skipping ${input.name} because it has no value`);
            }
        });

        // Tạo URL mới chỉ chứa các tham số có giá trị
        const actionUrl = form.action.split("?")[0]; // Lấy URL gốc (bỏ query string cũ)
        const queryString = params.toString();
        const newUrl = queryString ? `${actionUrl}?${queryString}` : actionUrl;
        console.log(`Generated URL: ${newUrl}`);

        // Chuyển hướng đến URL mới
        window.location.href = newUrl;
    });
</script>
<style>
    .btn-detail {
        background-color: #2d5052;
        color: #ffffff;
        border: none;
        border-radius: 15px;
        padding: 5px 15px;
        font-size: 1.5rem;
        font-weight: 500;
        transition: all 0.3s ease;
    }

        .btn-detail:hover {
            background-color: #4a787a;
            transform: translateY(-2px);
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
            text-decoration: none;
            color: #DAA520;
        }
</style>